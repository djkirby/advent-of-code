function total(curr_line, acc, swap_line) {
  if (visited[curr_line]) 
    return;
  if (curr_line > NR) {
    print acc;
    return acc;
  }
  visited[curr_line] = 1;
  swap_curr_line = (curr_line == swap_line);
  should_jump = (!swap_curr_line && "jmp" ~ cmd[curr_line]) || 
      (swap_curr_line && "nop" ~ cmd[curr_line]);
  if (should_jump)
    return total(curr_line + val[curr_line], acc, swap_line);
  if ("acc" ~ cmd[curr_line])
    return total(curr_line + 1, acc + val[curr_line], swap_line);
  return total(curr_line + 1, acc, swap_line);
}

function clear_visited() {
  for (v in visited)
    delete visited[v];
}

{ cmd[++n] = $1; val[n] = $2; }
/jmp/ { jmps[++j] = NR }
/nop/ { nops[++p] = NR }
END {
  total(1, 0, 0); 
  for (ji in jmps) {
    clear_visited();
    total(1, 0, jmps[ji]);
  }
  for (ni in nops) {
    clear_visited();
    total(1, 0, nops[ni]);
  }
}